#
## cron.cf @SURFsara
#
bundle common cron()
{
    vars:

        any::
            ## Mustache templates
            "template_2_destination" data => parsejson('
                    {
                        "allow.mustache" : "$(allow_file)",
                        "deny.mustache" : "$(deny_file)",
                    }
                ');

        debian|centos::
            "allow_file" string => "/etc/cron.allow";
            "deny_file"  string => "/etc/cron.deny";
            "allow_owner" string => "root";
            "allow_group" string => "root";
            "allow_mode"  string => "0644";
}

bundle agent cron_autorun()
{
    meta:
         "tags" slist => { "autorun", "template_cron" };

    methods:
        "" usebundle => sara_template_autorun("cron"),
            classes => results("namespace", "cron");

    reports:
        any::
            "$(this.bundle): has been called"
                ifvarclass => "DEBUG|DEBUG_cron|DEBUG_$(this.bundle)";

}

###
# Install a cronjob in a Vixie cron environment
#
bundle agent cron_job(name, data)
{
    vars:
        any::
            "cron_dir" string => "/etc/cron.d";
            "header" string => "## Maintained by CFengine$(const.n)#$(const.n)";

            "template" string => "$(header){{{minute}}} {{{hour}}} {{{day_of_month}}} {{{month}}} {{{day_of_week}}} {{{user}}} {{{command}}}";

            "job_str" string => string_mustache( "$(template)", "@(data)");

    classes:
        any::
            "CRON_VIXIE" expression => isdir("$(cron_dir)");

    files:
@if minimum_version(3.12)
            CRON_VIXIE::
                "$(cron_dir)/$(name)"
                     comment => "Vixie cron: one command per file",
                     create => "true",
                     edit_template_string   => "$(template)$(const.n)",
                     template_method => "inline_mustache",
                     template_data => "@(data)",
                     classes => results("namespace", "cron_job_$(name)");
@endif

    methods:
            CRON_VIXIE.(cfengine_3_10|cfengine_3_7)::
                "" usebundle => file_make("$(cron_dir)/$(name)", "$(job_str)"),
                    classes => results("namespace", "cron_job_$(name)");

    reports:
            any::
                "'$(name)' is installed in $(cron_dir): $(const.n)$(job_str)"
                    ifvarclass => "DEBUG|DEBUG_cron|DEBUG_$(this.bundle)";

            !CRON_VIXIE::
                "No Vixie cron software installed";
}
@if minimum_version(99.9)

= cron =
[source:trunk/cfengine3/config/services/cron.cf source cron.cf]

This bundle will generate these/this file(s) from mustache templates:
 * /etc/cron.allow
 * /etc/cron.deny

If one of the files is changed then the following ""class"" will be set:
 * sara_etc_cron_allow
 * sara_etc_cron_deny

These templates are located in:
 * templates/cron
 * templates/cron/json

In this bundle there is also separte bundle that can be called to install system cronjobs in `/etc/cron.d`, This
bunnle is called:
 * cron_job(name, data)

Where:
 * name: is the name of the cronjob file
 * data: Json data. eg: 2 minute cronjob
{{{
#!json
{
    "minute": "*/2",
    "hour": "*",
    "day_of_month": "*",
    "month": "*",
    "day_of_week": "*",
    "user": "root",
    "command": "/bin/ls"
}

== Usage ==

The bundle is called with:
 * `"" usebundle => cron_autorun();`

You can also create a cron job entry in `/etc/cron.d`, eg:
 * `"" use bundle => cron_job("check_cfexecd", @(d));`
{{{
#!cf3
vars:
   "d" data => parsejson('{
        "minute": "*/4",
        "hour": "*",
        "day_of_month": "*",
        "month": "*",
        "day_of_week": "*",
        "user": "root",
        "command": "sh $(sys.inputdir)/check_cfexecd.sh  || $(sys.bindir)/cf-agent -B `cat $(def.node_status_dir)/policy_server.dat`",
        }');
}}}

When we do not specifiy any json data files then only `default.json` will be
read. You can specify extra json data file via:
 * def.cf
{{{
#!cf3
vars:
    any::
        "cron" slist => { "sys_users.json" };
}}}

 * def.json
{{{
#!json
{
    "vars": {
        "cron": {
            "json_files": [ "sys_users.json" ]
        }
    }
}

The variable must be ''cron_json_files'' and with this setup 1 extra json file will be  merged.

== DEBUG ==

If you want to debug this bundle set the `DEBUG_sara_user_consume_resources` class, eg:
 * `-DDEBUG_cron`

== SETUP ==
{{{
#!json
{
    "allow_users": [ "root" ],
    "deny_users": [ ]
}

=== Def Usage ===
The following must be set in host specific host file: `def.json`
{{{
#!json
    "vars": {
        "sara_services_enabled": [
            ...
            "cron",
            ...
        ],
        "cron": {
        }
    },
}}}

In def.cf/def.json you can override the ``cron`` default values, eg def.json:
{{{
#!json
{
    "vars": {
        "cron": {
            "allow_users": [ "root", "bas", "jaap" ],
            "deny_users": [ "remy"  ]
        }
    }
}
}}}
@endif
