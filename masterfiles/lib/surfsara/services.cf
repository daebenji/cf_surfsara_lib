
@if minimum_version(99.9)
= services.cf =
This is the "global" run services  file. Each service is proctected by a class. To activate you have to set the corresponding 
class, eg:
 * To run the `ssh_autorun` you must set `SSH_BUNDLE` in `def.cf/def.json`. This setup can be used instead of the dynamic autorun method
@endif
bundle agent sara_services
{
    vars:
        "inputs" slist => maplist("$(def.sara_services_dir)$(this).cf", @(def.sara_services_enabled));

    methods:
        "" usebundle => sara_services_data(@(def.sara_services_enabled)),
            comment => "fetch/merge json data for all enabled services";
        "" usebundle => sara_services_run("$(def.sara_services_enabled)");

    reports:
        "Service enabled: $(def.sara_services_enabled)"
            ifvarclass => "DEBUG_$(this.bundle)|DEBUG";
}

bundle agent sara_services_data(services)
{
    methods:
        "" usebundle => sara_data_autorun("$(services)");
}

bundle agent sara_services_run(service)
{
    vars:
        any::
            "run_bundles" slist => bundlesmatching(".*", "template_$(service)"),
                comment => "Fetch all bundles by tage name in all namespaces";

            "run_class_var" slist => getvalues("sara_data.$(service)[run_class]"),
                comment => "Only run service when the specified classes are set";

            "run_class_var_str" string => format("%S", "run_class_var"),
                ifvarclass => "DEBUG|DEBUG_services|DEBUG_$(this.bundle)";

    classes:
        any::
            "run_class_set" expression => reglist("@(run_class_var)", ".+"),
                comment => "Service has specified classes. so check if there are met, if not set assume 'any' class";

            "run_class" expression => "$(run_class_var)",
                comment => "Run service if run_class definitions are met",
                ifvarclass => "run_class_set";

    methods:
        any::
            "" usebundle => $(run_bundles),
                comment => "Run service bundle if run_class is met or if run_class is absent",
                classes => results("namespace", "$(service)");
                ifvarclass => or(
                    "run_class",
                    "!run_class_set"
                    );

    reports:
        any::
            "any class used for $(service)"
                ifvarclass => and(
                    "DEBUG|DEBUG_services|DEBUG_$(this.bundle)",
                    "!run_class_set"
                    );
                    
            "run_class method for $(service) : $(run_class_var_str)"
                ifvarclass => and(
                        "DEBUG|DEBUG_services|DEBUG_$(this.bundle)",
                        "run_class"
                        );
}

body file control
{
    inputs => {
        @(sara_services.inputs)
    };
}
