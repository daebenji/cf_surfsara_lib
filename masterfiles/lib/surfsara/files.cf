bundle agent sara_mustache_autorun(bundle_name)
{
    vars:
        any::
            "template_files"    slist => getindices("$(bundle_name).template_2_destination");

    methods:
        ## Now for each template run this method, loop over the key values of data files
        "mustache" usebundle => sara_mustache_copy_and_merge("$(bundle_name)"),
            comment => "Sara mustache prepare files bundle";


        "mustache" usebundle => sara_mustache_autorun_expand("$(bundle_name)", "@(template_files)"),
            comment => "Sara mustache expand template files bundle";

    reports:
        any::
            "$(this.bundle) : called for $(bundle_name)"
                ifvarclass => "(DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE)";
}


bundle agent sara_mustache_copy_and_merge(bundle_name)
{
    vars:
        any::
            "template_files" slist => getindices("$(bundle_name).template_2_destination");

        json_file_variable_set.!json_local_generated_file_variable_set::
            "json_files"  slist => { "default.json", "@(def.$(bundle_name)_json_files)" };
            "json_copy_files"  slist => { "default.json", "@(def.$(bundle_name)_json_files)" };

        json_file_variable_set.json_local_generated_file_variable_set::
            "json_files"  slist => { "default.json", "@(def.$(bundle_name)_json_files)", "@(def.$(bundle_name)_local_generated_json_files)" };
            "json_copy_files"  slist => { "default.json", "@(def.$(bundle_name)_json_files)" };

        !json_file_variable_set.json_local_generated_file_variable_set::
            "json_files"  slist => { "default.json", "@(def.$(bundle_name)_local_generated_json_files)" };
            "json_copy_files"  slist => { "default.json" };

        !(json_file_variable_set|json_local_generated_file_variable_set)::
            "json_files" slist => { "default.json" };
            "json_copy_files"  slist => { "default.json" };

    classes:
        any::
            "json_file_variable_set" expression => isvariable("def.$(bundle_name)_json_files");
            "json_local_generated_file_variable_set" expression => isvariable("def.$(bundle_name)_local_generated_json_files");

    methods:
        "sara_mustache_copy"  usebundle => sara_mustache_copy("$(bundle_name)", "@(template_files)", "@(json_copy_files)"),
            comment => "Sara mustache copy the input files to a local directory";
            #classes => classes_generic("$(bundle_name)");

        ## Now for each template run this method, loop over the key values of data files
        "sara_data" usebundle => sara_data("$(bundle_name)", "@(json_files)"),
            comment => "Sara mustache merge data files bundle";

    reports:
        any::
            "$(this.bundle) Note: only using: default.json"
                ifvarclass => "!json_file_variable_set.(DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE)";

            "$(this.bundle): called for $(bundle_name)"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";
}


bundle agent sara_mustache_copy(bundle_name, template_files, json_files)
{
    vars:
        any::
            "bundle_json_dir"   string => "templates/$(bundle_name)/json";
            "bundle_template_dir"   string => "templates/$(bundle_name)";

            "json_files_str" string => format("%S", json_files),
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";

            "template_files_str" string => format("%S", template_files),
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";

    files:
        any::
            "$(def.node_template_dir)/$(bundle_name)/."
                comment => "Make sure the templatedir exsists for the bundle",
                perms => mog("0700", "root", "root"),
                create => "true";

        !MUSTACHE_SKIP_COPY:: 
            "$(def.node_template_dir)/$(bundle_name)/$(json_files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                classes     => if_repaired("$(bundle_name)_mustache_copied"),
                copy_from   => remote_dcp("$(bundle_json_dir)/$(json_files)", "$(sys.policy_hub)");

            "$(def.node_template_dir)/$(bundle_name)/$(template_files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                classes     => if_repaired("$(bundle_name)_mustache_copied"),
                copy_from   => remote_dcp("$(bundle_template_dir)/$(template_files)", "$(sys.policy_hub)");

    reports:

        any::
            "$(this.bundle) json_file(s) : $(json_files_str)"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";
            "$(this.bundle) template file : $(template_files_str)"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";

        MUSTACHE_SKIP_COPY:: 
            "MUSTACHE skipped copying of mustache/json template files";
}

bundle agent sara_mustache_autorun_expand(bundle_name,  template_files)
{
    vars:

    methods:
        "mustache" usebundle => sara_mustache_cf_data_2_file("$(bundle_name)", 
            "$(template_files)", 
            "$($(bundle_name).template_2_destination[$(template_files)])", 
            "");

    reports:
            "$(this.bundle): $(template_files) --> $($(bundle_name).template_2_destination[$(template_files)])"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";
}

bundle agent sara_mustache_cf_data_2_file(bundle_name, template_file, destination, data_section)
{

    vars:
        any::
            "template_dir"     string => "$(def.node_template_dir)/$(bundle_name)";

            "data_section_str" string => format("%S", "sara_data.$(bundle_name)[$(data_section)]"),
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";

    classes:
        #"data_section"     expression => isvariable("data_section"),
        "data_section"     expression => regcmp("[a-zA-Z].*", "$(data_section)"),
            comment => "data_section defined do use it",
            scope => "bundle";


    files:

       data_section::
                "$(destination)"
                    comment         => "Mustache expand with defined data_section variable ",
                    create          => "true",
                    edit_template   => "$(template_dir)/$(template_file)",
                    template_method => "mustache",
                    #template_data   => mergedata("cfengine_data", "template_data"),
                    #template_data   => @(template_data),
                    template_data   => mergedata("sara_data.$(bundle_name)[$(data_section)]"),
                    classes         => if_repaired("sara$(destination)");

       !data_section::
                "$(destination)"
                    comment         => "Mustache expand with cfengine json data",
                    create          => "true",
                    edit_template   => "$(template_dir)/$(template_file)",
                    template_method => "mustache",
                    classes         => if_repaired("sara$(destination)");

    reports:
        any::
            "$(bundle_name) : $(destination) has been generated"
                ifvarclass => canonify("sara$(destination)");

            "$(this.bundle): Template $(template_file) : $(destination)"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";

       data_section::
            "   data section used: $(data_section_str)"
                ifvarclass => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";
}
