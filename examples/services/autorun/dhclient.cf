bundle common dhclient
{
    vars:
        any::
            "bundle_dir" string => "cf_bundles_dir/dhclient";
            "template_2_destination" data => parsejson('{
                "hooks.mustache": "$(hooks_filename)"
            }');

        debian:: 
            "config_dir"        string => "/etc/dhcp";
            "enter_hooks_dir"   string => "$(config_dir)/dhclient-enter-hooks.d";
            "hooks_filename"    string => "$(enter_hooks_dir)/cfengine_generated";

        centos:: 
            "config_dir"        string => "/etc/dhcp";
            "hooks_filename"    string => "$(config_dir)/dhclient-enter-hooks";
}

bundle agent dhclient_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_dhclient" };

    methods:
        any::
            "" usebundle => dhclient_surfsara_config();
        
}

bundle agent dhclient_surfsara_config
{
    methods:
        any::
            "" usebundle => sara_mustache_autorun("dhclient");
}

@if minimum_version(99.9)
= dhclient =

For now this bundle generate only the 'dhclient-enter-hooks' file:
 * debian: /etc/dhcp/dhclient-enter-hooks.d/cfengine_generated
 * centos: /etc/dhcp/dhclient-enter-hooks

You can control what will be in in the hooks file by setting classes:
 *  DHCLIENT_RESOLV_CONF: will override the genreation of the resolv.comf file with your own code.

== Usage ==

The bundle is called with:
 *  `"" usebundle => dhclient_autorun();`

When we do not specifiy any json data files then only `default.json` will be
read. You can specify extra json data file via:
 * def.cf
{{{
#!cf3
classes:
    "DHCLIENT_RESOLV_CONF" or => { "any" };

vars:
    any::
        "dhclient_json_files" slist => { "override_resolv.json" };
}}}     

The variable must be ''dhclient_json_files'' and with this setup 1 extra json file will be  merged. 

=== DEBUG ===

f you want to debug this bundle set the `DEBUG_dhclient` class, eg:
 * `-DDEBUG_dhclient`

=== Setup ===
{{{
#!json
{
    "resolv_conf":
"
        make_resolv_conf()
        {
            echo 'Disabled make_resolv_conf, maintained by CFengine (dhclient.cf)'
        }
"
}  
}}}

=== Def Usage ===
The following must be set in host specific host file: `def.json`
{{{
#!json
    "classes": {
        "DHCLIENT_BUNDLE": "any", 
        "DHCLIENT_RESOLV_CONF": "any",
    },
}}}

In def.cf/def.json you can override the `resolv_conf` function, eg def.json:
{{{
#!json
    "vars": {
        "dhclient": {
            "resolv_conf": 
"
make_resol_conf()
{
    <something you wrote>
}
"
        },
    }
}}}
@endif

